#!/usr/bin/perl

use strict;
use warnings;

use Text::Markdown qw(markdown);
use POSIX qw(strftime);

my $indir = "..";
my $outdir = "html";
my $templatedir = "templates";

mkdir $outdir;

my $HEADER = slurp("$templatedir/header");
my $FOOTER = slurp("$templatedir/footer");
my $PREVIEW = slurp("$templatedir/preview");
my $GALLERYITEM = slurp("$templatedir/galleryitem");

my $NAVHTML = navhtml(Index => 'index.html') . navhtml('Gallery' => 'gallery.html') . ' . ';

my @stories;
for my $file (sort glob("$indir/*.md")) {
    (my $name = $file) =~ s/^\Q$indir\E\///;
    $name =~ s/\.md$//;

    my ($modified, $commit) = split / /, `git log -1 --pretty="format:%ct %H" \Q$file\E`;
    $modified //= 'never';
    $commit //= '';

    my $story = {
        file => $file,
        name => $name,
        modified => $modified,
        commit => $commit,
        markdown => slurp($file),
        # title => either "# title" from first line of markdown, else $name
    };

    if ($story->{markdown} =~ /^# (.*)/) {
        $story->{title} = $1;
    } else {
        $story->{title} = $name;
    }

    $story->{daily} = 1 if $name =~ /^20\d\d[01]\d[0123]\d$/;

    $NAVHTML .= navhtml($story->{title}, "$story->{name}.html") if !$story->{daily};

    push @stories, $story;
}

write_story($_) for @stories;
write_index(@stories);
write_gallery(@stories);

sub write_story {
    my ($story) = @_;

    # put "last modified" under the title
    my $markdown = $story->{markdown};
    if ($markdown =~ s/^(# .*)//) {
        $markdown = $1 . "\n" . lastmodified($story) . $markdown;
    } else {
        $markdown = lastmodified($story) . $markdown;
    }

    my $html = $HEADER . md2html($markdown) . $FOOTER;
    spit("$outdir/$story->{name}.html", template($html, $story));
}

sub write_index {
    my (@stories) = @_;

    my $html = '';

    for my $story (sort { $b->{name} cmp $a->{name} } @stories) {
        next if !$story->{daily};
        $html .= template($PREVIEW, $story);
    }

    spit("$outdir/index.html", template($HEADER . $html . $FOOTER, {
        title => 'jes notes',
    }));
}

sub write_gallery {
    my (@stories) = @_;

    my $html = '';

    my %image;

    for my $story (sort { $b->{name} cmp $a->{name} } @stories) {
        while ($story->{markdown} =~ /(https:\/\/img\.incoherency\.co\.uk\/\d+)/g) {
            push @{ $image{$1} }, $story;
        }
    }

    for my $url (reverse sort keys %image) {
        my $storieshtml = '<ul>' . join('', map { "<li><a href=\"$_->{name}.html\">$_->{title}</a></li>" } @{ $image{$url} }) . '</ul>';
        $html .= template($GALLERYITEM, {url => $url, stories => $storieshtml});
    }

    spit("$outdir/gallery.html", template($HEADER . $html . $FOOTER, {
        title => 'Gallery',
    }));
}

sub template {
    my ($html, $story) = @_;
    $html =~ s/__TITLE__/$story->{title}/g;
    $html =~ s/__NAME__/$story->{name}/g;
    $html =~ s/__LAST_MODIFIED__/$story->{modified}/g;
    $html =~ s/__LAST_COMMIT__/$story->{commit}/g;
    $html =~ s/__NAV__/$NAVHTML/g;
    $html =~ s/__PREVIEW__/md2html_preview($story->{markdown})/ge;
    $html =~ s/__URL__/$story->{url}/g;
    $html =~ s/__STORIES__/$story->{stories}/g;
    return $html;
}

sub slurp {
    my ($name) = @_;
    open (my $fh, '<', $name)
        or die "can't read $name: $!\n";
    my $c = join('', <$fh>);
    close $fh;
    return $c;
}

sub spit {
    my ($name, $c) = @_;
    open (my $fh, '>', $name)
        or die "can't write $name: $!\n";
    print $fh $c;
    close $fh;
}

sub md2html {
    my ($md) = @_;

    # fix un-hyperlinked hyperlinks
    $md =~ s/(?<!\()(https?:\/\/\S+)/[$1]($1)/g;

    my $html = markdown($md);

    # fix relative md hyperlinks
    $html =~ s/href="([^\/"]+)\.md"/href="$1.html"/g;

    # fix imagebin links
    $html =~ s/<a href="https:\/\/img\.incoherency\.co\.uk\/(\d+)">[^<]+<\/a>/<div class="img-container"><a class="img-link" href="https:\/\/img.incoherency.co.uk\/$1"><img src="https:\/\/img.incoherency.co.uk\/$1\/thumb"><\/a><\/div>/g;

    return $html;
}

sub md2html_preview {
    my ($md) = @_;

    # strip title
    $md =~ s/^# .*//;

    # grab headings
    my @headings = map { s/^#+\s*//; $_ } grep { /^##[^#]/ } split /\n/, $md;

    return join(', ', @headings);
}

sub lastmodified {
    my ($story) = @_;

    # in markdown format
    return "*Last modified: [" . strftime("%Y-%m-%d %H:%M:%S", gmtime($story->{modified})) . "](https://github.com/jes/notes/commit/$story->{commit})*\n";
}

sub navhtml {
    my ($title, $file) = @_;

    return "<a class=\"nav\" href=\"$file\">$title</a> ";
}
